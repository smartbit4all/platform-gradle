plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
    implementation 'org.springframework.boot:spring-boot-gradle-plugin:2.3.8.RELEASE'
    implementation 'com.vaadin:vaadin-gradle-plugin:0.14.3.7'
    implementation 'org.openapitools:openapi-generator-gradle-plugin:4.3.1'

    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

gradlePlugin {
    // Define the plugin
    plugins {
        sb4java {
            id = 'org.smartbit4all.platform.gradle.java'
            implementationClass = 'org.smartbit4all.platform.gradle.SB4JavaPlugin'
        }
        sb4vaadinmodule {
            id = 'org.smartbit4all.platform.gradle.vaadin-module'
            implementationClass = 'org.smartbit4all.platform.gradle.SB4VaadinModulePlugin'
        }
        sb4vaadinapp {
            id = 'org.smartbit4all.platform.gradle.vaadin-app'
            implementationClass = 'org.smartbit4all.platform.gradle.SB4VaadinAppPlugin'
        }
        sb4openapi {
            id = 'org.smartbit4all.platform.gradle.openapi'
            implementationClass = 'org.smartbit4all.platform.gradle.SB4OpenApiPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
